<?xml version="1.0" standalone="no"?>

<stack>

<si_copyright>
Copyright (c) 2006 - 2017 StackIQ Inc.
All rights reserved. stacki(r) v4.0 stacki.com
https://github.com/Teradata/stacki/blob/master/LICENSE.txt
</si_copyright>

<copyright>
Copyright (c) 2000 - 2010 The Regents of the University of California
All rights reserved. Rocks(r) v5.4 www.rocksclusters.org
https://github.com/Teradata/stacki/blob/master/LICENSE-ROCKS.txt
</copyright>

<pre>

<!-- propagate root's public ssh key for ekv -->

<!-- if the authorized_keys file already exists, then don't recreate it -->
if [ -f /tmp/authorized_keys ]
then
	exit
fi

<!--
	not using 'file' tags as file tags are expanded by kgen to include
	extra wrapper code and this wrapper code is not present in the 'pre'
	environment.
-->

cat &gt; /tmp/authorized_keys &lt;&lt; 'EOF'
<eval shell="python">

import os

def readkeys(filename):
	try:
		file = open(filename, 'r')
		for key in file.readlines():
			if len(key) > 0:
				print '%s' % (key[:-1])
		file.close()
	except:
		pass

	return

#
# first put in root's public key
#
readkeys('/root/.ssh/id_rsa.pub')

#
# now get all the public keys for the trusted users
#
keydir = '/etc/ssh/authorized_keys'

if os.path.isdir(keydir):
	for keyfile in os.listdir(keydir):
		filename = os.path.join(keydir, keyfile)
		readkeys(filename)

</eval>
EOF

chmod 600 /tmp/authorized_keys

</pre>

<pre cond="'&release;' == '7.x'">

<file name="/etc/ssh/ssh_host_ecdsa_key" perms="0400" rcs="off">
<eval>
/opt/stack/sbin/read-ssh-private-key ECDSA 2> /dev/null
</eval>
</file>

/sbin/sshd -f /etc/ssh/sshd_config.anaconda \
	-h /etc/ssh/ssh_host_ecdsa_key -p 2200
</pre>

</stack>
