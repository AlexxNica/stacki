<?xml version="1.0" standalone="no"?>

<kickstart>


<description>
Boot loader configuration for cluster appliances.
</description>

<si_copyright>
(c) 2006 - 2015 StackIQ Inc.
All rights reserved. stacki(r) v1.0 www.stacki.com
</si_copyright>

<copyright>
Copyright (c) 2000 - 2010 The Regents of the University of California.
All rights reserved. Rocks(r) v5.4 www.rocksclusters.org	
</copyright>


<post interpreter="/opt/stack/bin/python">
import os
import os.path
import stack.grub

#
# reinstall a physical machine
#
makegrub = stack.grub.App()

makegrub.setInstallKernel(
	'kickstart/default/vmlinuz-&version;-&arch;')
makegrub.setInstallRamdisk(
	'kickstart/default/initrd.img-&version;-&arch;')

args = "ks nonm biosdevname=0 selinux=0"
<eval>
KSDEVICE=`/opt/stack/bin/python -c "
import stack.api
import json
ifaces=stack.api.Call('list.host.interface',['&hostname;',])
for i in ifaces:
	if i['subnet'] == 'private':
		print i['iface']
		break
"`
if [ "x$KSDEVICE" != "x" ]; then
echo -e "\targs += \" ksdevice=$KSDEVICE\""
fi
</eval>
	makegrub.run(args)

	newmakegrub = stack.grub.App()

	#
	# and set the boot flags for a physical machine
	#

	args = "nonm biosdevname=0"

	<eval mode="xml">
	BOOTFLAGS=`/opt/stack/bin/stack report host bootflags &hostname;`
	echo "args += \" $BOOTFLAGS\""
	</eval>

	newmakegrub.setBootTitle('title')

	#
	# set the bootflags for both the grub.conf and grub-orig.conf files
	#
	newmakegrub.setFilename('grub.conf')
	newmakegrub.append(args)

	newmakegrub.setFilename('grub-orig.conf')
	newmakegrub.append(args)
</post>

</kickstart> 

