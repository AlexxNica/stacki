<?xml version="1.0" standalone="no"?>

<kickstart>

<si_copyright>
(c) 2006 - 2015 StackIQ Inc.
All rights reserved. stacki(r) v1.0 www.stacki.com
</si_copyright>

<!-- default partitioning scheme -->

<pre interpreter="/opt/stack/bin/python">
import sys
sys.path.append('/opt/stack/lib')

import stack_partition
import os

nukedisks = '&nukedisks;'
release = '&release;'

def initDiskLabel(disk):
	# break down software disk arrays
	cmd = '/sbin/mdadm --stop --scan > /dev/null 2>&amp;1'
	os.system(cmd)

	cmd = '/sbin/mdadm --zero-superblock /dev/%s' % disk
	cmd += ' > /dev/null 2>&amp;1'
	os.system(cmd)

	# Clear out the master boot record of the drive
	cmd = '/bin/dd if=/dev/zero of=/dev/%s count=512 bs=1' % disk
	cmd += ' > /dev/null 2>&amp;1'
	os.system(cmd)

	cmd = '/usr/sbin/parted -s /dev/%s mklabel gpt' % disk
	cmd += ' > /dev/null 2>&amp;1'
	os.system(cmd)


def doBootDisk(file, disk):
	if release == '7.x':
		file.write('part biosboot --fstype=biosboot --size=1 ' +
			'--ondisk=%s\n' % disk)
	file.write('part / --size=16000 --fstype=ext4 --ondisk=%s\n' % disk)
	file.write('part swap --size=1000 --ondisk=%s\n' % disk)
	file.write('part /var --size=16000 --fstype=xfs --ondisk=%s\n' % disk)
	file.write('part /state/partition1 --size=1 --grow --fstype=xfs ' +
		'--ondisk=%s\n' % disk)
	
def loadSpreadsheetPartitions(disk_info):
	file = open("/tmp/user_partition_info", "w")

	type_dict = {}
	val_arr = []
	for o in disk_info:
		type = o['fstype']
		if type not in type_dict:
			val_arr = []
		else:
			val_arr = type_dict[type]
		val_arr.append(o)
		type_dict[type] = val_arr

	# Write all definitions of type lvm i.e. pv's
	if 'lvm' in type_dict:
		lvm_info = type_dict['lvm']
		for o in lvm_info:
			size = "--size=" + str(o['size'])
			if o['size'] in ['recommended', 'hibernation']:
				size = '--' + o['size']
				
			st = "part %s %s --ondisk=%s %s" % \
				(o['mountpoint'], size, o['device'], \
				o['options'].replace("'","").replace('"', ''))
			file.write(st + "\n")

	lvm_mountpts = []
	# Write all volgroups - Make a note of these.
	if 'volgroup' in type_dict:
		volgroup_info = type_dict['volgroup']
		for v in volgroup_info:
			#
			# v['device'] can be 'pv.01 pv.02 pv.03'
			# Put each of them in a separate volgroup
			# definition.
			#
			dev_arr = v['device'].split()
			
			for d in dev_arr:
				# Ignore size options
				st = "volgroup %s %s %s" % \
					(v['mountpoint'], d, \
					v['options'].replace("'","").replace('"', ''))
				file.write(st + "\n")
			lvm_mountpts.append(v['mountpoint'])
	
	# Write remaining - check if its a logvol definition
	for o in disk_info:
		# Skip lvm, volgroup since they are already written.
		if o['fstype'] in ['lvm', 'volgroup']:
			continue
		size = str(o['size'])
		if size == '0':
			size = "--size=1 --grow"
		elif size in ['recommended', 'hibernation']:
			size = "--" + size
		else:
			size = "--size=" + size
	
		# Check if device is an lvm mountpoint
		if o['device'] in lvm_mountpts:
			st = "logvol %s --fstype %s %s --vgname=%s %s" % \
				(o['mountpoint'], o['fstype'], \
				o['options'].replace("'","").replace('"', ''), \
				o['device'], size)
		else:
			st = "part %s %s --fstype=%s --ondisk=%s %s" % \
				(o['mountpoint'], size, o['fstype'], \
				o['device'], \
				o['options'].replace("'","").replace('"', ''))
		file.write(st + "\n")
	file.close()

def str2bool(s):
	if s and s.upper() in [ 'ON', 'YES', 'Y', 'TRUE', '1' ]:
		return 1
	else:
		return 0


#
# now go do the partitioning
#
p = stack_partition.StackPartition()
disks = p.getDisks()

file = open('/tmp/system_partition_info', 'w')

if str2bool(nukedisks):
	for disk in disks:
		initDiskLabel(disk)

output = <eval>/opt/stack/bin/stack report host storage partition &hostname;</eval>

if output:
	loadSpreadsheetPartitions(output)
else:
	doBootDisk(file, disks[0])
file.close()

</pre>
</kickstart>
