<?xml version="1.0" standalone="no"?>

<kickstart>

<si_copyright>
(c) 2006 - 2015 StackIQ Inc.
All rights reserved. stacki(r) v1.0 www.stacki.com
</si_copyright>


<pre interpreter="/opt/stack/bin/python">
import sys
sys.path.append('/opt/stack/lib')

def str2bool(s):
	if s and s.upper() in [ 'ON', 'YES', 'Y', 'TRUE', '1' ]:
		return 1
	else:
		return 0

def getController():

	import controller_storcli
	ctrl = controller_storcli.StorCLI()
	adapter = ctrl.getAdapter()
	if adapter != None:
		flags = '&storcli.flags;'.split(',')
		return (ctrl, adapter, flags)

	import controller_megacli
	ctrl = controller_megacli.Megacli()
	adapter = ctrl.getAdapter()
	if adapter != None:
		flags = "&mcli.flags;".split(',')
		return (ctrl, adapter, flags)

	import controller_hpssacli
	ctrl = controller_hpssacli.Hpssacli()
	adapter = ctrl.getAdapter()
	if adapter != None:
		flags = "&hpcli.flags;".split(',')
		return (ctrl, adapter, flags)

	return (None, None, None)

#
# only run this code if 'nukecontroller' is true
#
if not str2bool('&nukecontroller;'):
	sys.exit(0)

# Get the Controller Object, the adapter info,
# and CLI flags

(ctrl, adapter, flags) = getController()


if ctrl == None:
	sys.exit(0)

if adapter == None:
	sys.exit(0)

output = \
<eval>
/opt/stack/bin/stack report host storage controller &hostname;
</eval>

#
# if no output, then just nuke the first adapter and exit
#
if not output:
	ctrl.doNuke(adapter)
	sys.exit(0)


#
# reconstruct the arrays
#
arrayids = []
for o in output:
	arrayid = o['arrayid']
	if arrayid not in arrayids:
		arrayids.append(o['arrayid'])

arrayids.sort()

nuked = []

for arrayid in arrayids:
	slots = []
	hotspares = []
	raidlevel = None
	enclosure = None
	adapter = None
		
	for o in output:
		if o['arrayid'] != arrayid:
			continue

		if 'slot' in o.keys():
			if 'raidlevel' in o.keys() and \
					o['raidlevel'] == 'hotspare':
				hotspares.append(o['slot'])
			else:
				slots.append(o['slot'])

		if 'adapter' in o.keys() and not adapter:
			try:
				adapter = int(o['adapter'])
			except:
				adapter = None
		if 'enclosure' in o.keys() and not enclosure:
			try:
				enclosure = o['enclosure']
			except:
				enclosure = None
		if 'raidlevel' in o.keys() and not raidlevel:
			raidlevel = o['raidlevel']

			if raidlevel != 'hotspare':
				raidlevel = int(o['raidlevel'])

	if not adapter:
		adapter = ctrl.getAdapter()
	if not enclosure:
		enclosure = ctrl.getEnclosure(adapter)

	if adapter not in nuked:
		ctrl.doNuke(adapter)
		nuked.append(adapter)
		freeslots = ctrl.getSlots(adapter)

	slots.sort()

	if len(slots) == 1 and slots[0] == '*':
		for slot in freeslots:
			ctrl.doRaid(raidlevel, adapter, enclosure, [ slot ],
				hotspares, flags)
		freeslots = []
	else:
		for slot in slots:
			try:
				freeslots.remove(slot)
			except:
				pass

		#
		# if this is a global hot spare, then skip it. we'll do
		# global hot spares later
		#
		if raidlevel != 'hotspare' and arrayid != 'global':
			ctrl.doRaid(raidlevel, adapter, enclosure, slots,
				hotspares, flags)

#
# do the global hot spares last
#
for arrayid in arrayids:
	slots = []
	hotspares = []
	raidlevel = None
	enclosure = None
	adapter = None
		
	#
	# a global hotspare has an array id of 'global' and a
	# raidlevel of 'hotspare'
	#
	for o in output:
		if o['arrayid'] != 'global':
			continue

		if 'slot' in o.keys():
			if 'raidlevel' in o.keys() and \
					o['raidlevel'] == 'hotspare':
				hotspares.append(o['slot'])

		if 'adapter' in o.keys() and not adapter:
			try:
				adapter = int(o['adapter'])
			except:
				adapter = None
		if 'enclosure' in o.keys() and not enclosure:
			try:
				enclosure = o['enclosure']
			except:
				enclosure = None

	if not adapter:
		adapter = ctrl.getAdapter()
	if not enclosure:
		enclosure = ctrl.getEnclosure(adapter)

	if hotspares:
		hotspares.sort()
		ctrl.doGlobalHotSpare(adapter, enclosure, hotspares)

</pre>


</kickstart> 

