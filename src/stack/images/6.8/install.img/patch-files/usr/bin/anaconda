#!/bin/sh
#
# @Copyright@
#  				Rocks(r)
#  		         www.rocksclusters.org
#  		         version 5.4 (Maverick)
#  
# Copyright (c) 2000 - 2010 The Regents of the University of California.
# All rights reserved.	
#  
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#  
# 2. Redistributions in binary form must reproduce the above copyright
# notice unmodified and in its entirety, this list of conditions and the
# following disclaimer in the documentation and/or other materials provided 
# with the distribution.
#  
# 3. All advertising and press materials, printed or electronic, mentioning
# features or use of this software must display the following acknowledgement: 
#  
# 	"This product includes software developed by the Rocks(r)
# 	Cluster Group at the San Diego Supercomputer Center at the
# 	University of California, San Diego and its contributors."
# 
# 4. Except as permitted for the purposes of acknowledgment in paragraph 3,
# neither the name or logo of this software nor the names of its
# authors may be used to endorse or promote products derived from this
# software without specific prior written permission.  The name of the
# software includes the following terms, and any derivatives thereof:
# "Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
# the associated name, interested parties should contact Technology 
# Transfer & Intellectual Property Services, University of California, 
# San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
# Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
#  
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# @Copyright@
#
# @SI_Copyright@
# @SI_Copyright@


ROCKPATH=/tmp/updates/stack
export PATH=$PATH:$ROCKPATH/bin:/tmp/updates/usr/sbin:/tmp/updates/sbin:/tmp/updates/usr/bin

echo "PATH=$PATH:$ROCKPATH/bin" >> /.profile
echo "export PATH" >> /.profile

echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/tmp/updates/lib:/tmp/updates/usr/lib64:/tmp/updates/usr/lib" >> /.profile
echo "export LD_LIBRARY_PATH" >> /.profile

LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/tmp/updates/lib:/tmp/updates/usr/lib64:/tmp/updates/usr/lib:/lib64_old:/lib_old
export LD_LIBRARY_PATH

FOUNDATION=`/opt/stack/bin/python -c "
import sys
import string
print string.join(sys.path, ':')
"`

INSTALLEDPYTHON=`python -c "
import sys
import string
print string.join(sys.path, ':')
"`

#
# before calling the real anaconda, blow away the 'platform' file.
# this causes anaconda to correctly detect the processor
# (e.g., i686 vs. athlon)
#
rm -f /etc/rpm/platform

#
# make sure there is a home directory for root
#
mkdir -p /root

#
# make sure anaconda can see the disks
#
/opt/stack/bin/make-bootable-disks > /dev/null 2>&1

#
# configure up sshd for the install environment
#
echo "Port 2200
ListenAddress 0.0.0.0
HostDSAKey /tmp/ssh_host_dsa_key
HostKey /tmp/ssh_install_host_key
AuthorizedKeysFile /tmp/authorized_keys
ServerKeyBits 768
LoginGraceTime 600
KeyRegenerationInterval 3600
IgnoreRhosts yes
StrictModes no
X11Forwarding no
X11DisplayOffset 10
PrintMotd no
KeepAlive yes
SyslogFacility DAEMON
RhostsRSAAuthentication no
RSAAuthentication yes
ChallengeResponseAuthentication no
PasswordAuthentication no
PermitEmptyPasswords no
PermitRootLogin yes
UseLogin no
UsePrivilegeSeparation no" > /tmp/sshd_install_config

echo "sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin" \
	>> /etc/passwd

#
# if one of the partitions is a software raid and if the raid is in a
# "dirty" state, mdadm will try to 'resync' the disks to ensure all the
# data is protected.
#
# on a running system, this is a great thing to do. 
#
# on an installing system, it slows the install down considerably.
#
# i haven't found a way to disable the 'resync' action for mdadm, but we can
# extremely throttle back the top rebuild speed.
#
echo 1 > /proc/sys/dev/raid/speed_limit_min
echo 2 > /proc/sys/dev/raid/speed_limit_max

#
# translate an XML-based kickstart file into a redhat compliant one
#
if [ -f /tmp/ks.cfg ]
then
	#
	# save off the kickstart file as 'ks.xml'. on client nodes, we'll
	# modify this ks.xml with the appropriate partitioning info
	#
	if [ ! -f /tmp/ks.xml ]
	then
		cp /tmp/ks.cfg /tmp/ks.xml
	fi

	cat /tmp/ks.xml | /opt/stack/bin/stack list host profile chapter=kickstart 2> /tmp/kgen.debug > /tmp/k
	if [ $? = 0 ]
	then 
		mv /tmp/k /tmp/ks.cfg
	fi
fi

#
# make sure a dummy /tmp/partition-info file exists, otherwise the
# installer will throw an exception
#
touch /tmp/partition-info


rescue()
{
	#
	# start the shell so the user can issue rescue commands
	#
	echo "Rescue Mode: Starting shell..."
	echo
	# Dont ask. RedHat's rescue mode is brain-damaged.
	rm -f /etc/group
	rm -f /etc/services
	rm -f /etc/nsswitch.conf
	rm -f /etc/protocols

	/opt/stack/lib/anaconda_stack.py $* --rescue \
		--method=http://localhost/mnt/cdrom
}

start_sshd()
{
	#
	# startup an ssh server
	#
	/sbin/ssh-keygen -t rsa1 -b 1024 -f /tmp/ssh_install_host_key -N "" > \
		/dev/null 2>&1
	/sbin/ssh-keygen -d -f /tmp/ssh_host_dsa_key -N "" > /dev/null 2>&1

	case "`/usr/bin/uname -m`" in
	x86_64)
		lib="/lib64/security"
		;;
	*)
		lib="/lib/security"
		;;
	esac

	echo "sshd auth       required     $lib/pam_permit.so" > /etc/pam.conf
	echo "sshd account    required     $lib/pam_permit.so" >> /etc/pam.conf
	echo "sshd password   required     $lib/pam_permit.so" >> /etc/pam.conf
	echo "sshd session    required     $lib/pam_permit.so" >> /etc/pam.conf

	/sbin/sshd -f /tmp/sshd_install_config >> /tmp/ssh.debug 2>&1
}

ekv()
{
	#
	# startup anaconda in the pty wrapper
	#
	unset LD_PRELOAD
	unset LANG
	unset LANGUAS
	export TERM=vt100

	csp "pty-wrapper.py $* | /usr/bin/tee /dev/console | \
		detach \"draino | detour -p 8000\" 2> /dev/null "
}

server()
{
	#
	# this function is called when setting up a server, like a frontend
	#
	mkdir /export
	mount -t ramfs -o size=256m ext4 /export
	
	grep -q "ekv" /proc/cmdline
	if [ $? -eq 0 ]; then
		start_sshd
		EKV="ekv"
	else
		EKV=""
	fi

	echo "#!/sbin/bash
/opt/stack/lib/anaconda_stack.py $*
if [ -f /tmp/rolls.xml ] ; then
	# Change the method as well. Needed for WAN kickstart.
	rm -f /sbin/mpath_prio_*
	/opt/stack/lib/anaconda_stack.py \
		--kickstart /tmp/ks.cfg \
		--graphical \
		--noselinux \
		--lang en_US \
		--keymap us
fi
/usr/bin/killall --quiet pty-wrapper.py" > /tmp/stack-install.sh

	chmod a+x /tmp/stack-install.sh
	$EKV /tmp/stack-install.sh
}

client()
{
	#
	# this function is called when setting up a client, like a
	# compute node
	#
	start_sshd

	PARAMS=`echo $* | sed 's/http:\/\/[^/]*\//http:\/\/127.0.0.1\//g'`

	echo "ekv /opt/stack/lib/anaconda_stack.py $PARAMS" >> /tmp/ekv.debug

	ekv /opt/stack/lib/anaconda_stack.py $PARAMS

	#
	# before exiting, tell the Avalanche tracker that this node is no
	# longer serving files 
	#
	/opt/stack/bin/peer-done
}


MODE=""

grep -q "build" /proc/cmdline
if [ $? -eq 0 ]; then
	MODE="server"
fi

grep -q "rescue" /proc/cmdline
if [ $? -eq 0 ]; then
	MODE="rescue"
fi

case "$MODE" in
server)
	server $*
	;;
rescue)
	rescue
	;;
*)
	client $* 
	;;
esac


/usr/bin/killall --quiet lighttpd

